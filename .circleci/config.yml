aliases:
  # Common caches
  - &restore-yarn-cache
    keys:
      - package-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/package.json" }}
      - package-cache-v1-{{ arch }}-{{ .Branch }}-
      - package-cache-v1-{{ arch }}-master-

  - &save-yarn-cache
    paths:
      - CICD/node_modules
      - ~/CICD/.cache/yarn
    key: package-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/package.json" }}

  - &restore-react-native-cli
    keys:
      - react-native-cli-cache-v1-{{ arch }}

  - &save-react-native-cli
    paths:
      - CICD/node_modules
    key: react-native-cache-v1-{{ arch }}

  # Android cache
  - &restore-gem-android
    keys:
      - gem-android-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/android/Gemfile.lock" }}
      # Fallback in case checksum fails
      - gem-android-cache-v1-{{ arch }}-{{ .Branch }}-
      # Fallback in case this is a first-time run on a fork
      - gem-android-cache-v1-{{ arch }}-master-
  - &restore-gem-ios
    keys:
      - gem-ios-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/ios/Gemfile.lock" }}
      # Fallback in case checksum fails
      - gem-ios-{{ arch }}-{{ .Branch }}-
      # Fallback in case this is a first-time run on a fork
      - gem-ios-{{ arch }}-master-

  - &save-gem-android
    paths:
      - CICD/android/vendor/bundle
    key: gem-android-cache-v1-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/android/Gemfile.lock" }}
  
  - &save-gem-ios
    paths:
      - CICD/ios/vendor/bundle
    key: gem-ios-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/ios/Gemfile.lock" }}
  
  - &install-cocoapods
    name: Install CocoaPods
    command: |
      cd CICD/ios
      pod --version
      curl https://cocoapods-specs.circleci.com/fetch-cocoapods-repo-from-s3.sh | bash -s cf
      rm -rf Pods && pod install
      chmod u+x tools/strip_unused_archs.sh
  
  - &restore-cocoapods
    keys:
      - cocoapods-ios-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/ios/Podfile.lock" }}
      # Fallback in case checksum fails
      - cocoapods-ios-{{ arch }}-{{ .Branch }}-
      # Fallback in case this is a first-time run on a fork
      - cocoapods-ios-{{ arch }}-master-

  - &save-cocoapods
    paths:
      - ~/.cocoapods
      - CICD/ios/Pods
    key: cocoapods-ios-{{ arch }}-{{ .Branch }}-{{ checksum "CICD/ios/Podfile.lock" }}

  # Select branch to build
  - &branches
    only:
      - beta
      - master
    
  - &install-node-version
    name: Install Nodejs version 14.2.0
    command: |
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash
      echo 'export NVM_DIR="/Users/distiller/.nvm"' >> $BASH_ENV
      echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV # This loads nvm
      source /Users/distiller/.bashrc
      nvm install v14.2.0
      nvm use v14.2.0

  - &install-react-native-cli
    name: Install react-native-cli
    command: |
      cd CICD && yarn add react-native-cli

  - &install-fastlane-android
    name: Install fastlane
    command: |
      cd CICD/android
      bundle update
      gem install json
      bundle install --path vendor/bundle
  
  - &install-fastlane-ios
    name: Install fastlane & bundler
    command: |
      brew update
      brew install ruby
      brew cask install fastlane
    no_output_timeout: 30m

  - &install-bundler-ios
    name: Bundler install
    command: |
      cd CICD/ios
      gem install json
      bundle update
      bundle install --path vendor/bundle

  - &yarn
    name: Install Node Dependencies
    command: |
      rm -rf node_modules
      rm -rf ~/.rncache
      cd CICD && yarn cache clean && yarn install

  - &test
    name: Run unit test
    command: |
      cd CICD && yarn test --coverage

    # Jest CLI Options: https://jestjs.io/docs/en/cli.html
  - &version-patch
    name: Version patch
    command: |
      cd CICD
      npm version patch

  - &install-awscli
    name: Install awscli
    command: sudo pip install awscli

  - &build-apk-upload-upload_store
    name: Build apk & upload
    command: |
      cd CICD/android
      export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
      export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY

      if [[ $CIRCLE_BRANCH == "beta" ]]; then
        echo "APPLICATION_ID=com.cicd.nhanhuynh.app" &>> gradle.properties
        bundle exec fastlane beta upload_store:true
        aws s3 cp ~/CICD/CICD/android/app/build/outputs/apk/beta/app-beta.apk "s3://${AWS_S3_BUCKET_NAME}/beta/$(date +'%y-%m-%d-%H-%M')/cicd-beta.apk"
      elif [[ $CIRCLE_BRANCH == "master" ]]; then
        echo "APPLICATION_ID=com.cicd.app.pro" &>> gradle.properties
        bundle exec fastlane prod upload_store:true
        aws s3 cp ~/CICD/CICD/android/app/build/outputs/bundle/prod/app-prod.aab "s3://${AWS_S3_BUCKET_NAME}/prod/$(date +'%y-%m-%d-%H-%M')/cicd-prod.aab"
      fi

  - &decode-keys-android
    name: Decode the keystore files
    command: |
      if [[ $CIRCLE_BRANCH == "beta" ]]; then
        cd CICD/android/app && echo $ENCODED_KEYSTORE_BETA | sed 's/ /\n/g' | base64 --decode >> beta.keystore
      fi
      if [[ $CIRCLE_BRANCH == "master" ]]; then
        cd CICD/android/app && echo $ENCODED_KEYSTORE_PROD | sed 's/ /\n/g' | base64 --decode >> release-product.keystore
      fi
      
  - &decode-google-service
    name: Decode the google services file
    command: |
      if [[ $CIRCLE_BRANCH == "beta" ]]; then
        cd CICD/android && echo $ENCODED_GOOGLE_SERVICES_BETA | sed 's/ /\n/g' | base64 --decode >> google-services.json
      fi
      if [[ $CIRCLE_BRANCH == "master" ]]; then
        cd CICD/android && echo $ENCODED_GOOGLE_SERVICES | sed 's/ /\n/g' | base64 --decode >> google-services.json
      fi

  - &license-build-tools
    name: Approve license for build tools
    command: (echo y; echo y; echo y; echo y; echo y; echo y) | $ANDROID_HOME/tools/bin/sdkmanager --licenses
      
version: 2

jobs:
  build:
    working_directory: ~/CICD
    docker:
      - image: circleci/node:14.2.0

    steps:
      - checkout
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - persist_to_workspace:
          root: ~/CICD
          paths:
            - .
            
  test:
    working_directory: ~/CICD/
    docker:
      - image: circleci/node:14.2.0
    steps:
      - checkout
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - run: *test

  android:
    working_directory: ~/CICD/
    docker:
      - image: circleci/android:api-29-node

    steps:
      - checkout
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - restore-cache: *restore-gem-android
      - save-cache: *save-gem-android
      - run: *install-fastlane-android
      - run: *version-patch
      - run: *test
      - run: *license-build-tools
      - run: *decode-keys-android
      - run: *install-awscli
      - run: *decode-google-service
      - run: *build-apk-upload-upload_store

  ios:
    macos:
      xcode: "10.15.5"
    working_directory: ~/CICD
    environment:
      FL_OUTPUT_DIR: output
      FASTLANE_LANE: ${CIRCLE_BRANCH}
    shell: /bin/bash --login -o pipefail
    steps:
      - checkout
      - restore-cache: *restore-gem-ios
      - run: *install-bundler-ios
      - save-cache: *save-gem-ios
      - run: *install-awscli
      - run: *install-node-version
      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache
      - run: *test
      - restore-cache: *restore-cocoapods
      - run: *install-cocoapods
      - save-cache: *save-cocoapods
      - restore-cache: *restore-react-native-cli
      - run: *install-react-native-cli
      - save-cache: *save-react-native-cli
      - run: *version-patch
      - run:
          name: Create a main.jsbundle
          command: |
            cd CICD
            node ./node_modules/react-native-cli/index.js bundle --entry-file='index.js' --bundle-output='./ios/main.jsbundle' --dev=false --platform='ios' --assets-dest='./ios'
      - run:
          name: Build and upload ipa to S3 internal
          command: |
            python -c "import hashlib;m=hashlib.md5();print(m.hexdigest())"
            export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID
            export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY
            cd CICD/ios
            bundle exec fastlane

workflows:
  version: 2
  deploy:
    jobs:
      - build:
          filters:
            branches: *branches
      - android:
          requires:
            - build
          filters:
            branches: *branches
      # Can't run build IOS with Free account
      # - ios:
      #     requires:
      #       - build
      #     filters:
      #       branches: *branches
