variables:
  - name: ROOT_DIR
    value: ~/CICD
  - name: DIR
    value: CICD
  - name: NODE_MODULES
    value: CICD/node_modules
  - name: YARN_CACHE
    value: ~/CICD/.cache/yarn
  - name: ROOT_ANDROID
    value: CICD/android

aliases: # Cache Management
  - &restore-yarn-cache
    keys:
      - yarn-0605-{{ arch }}-{{ .Branch }}-{{ checksum "$DIR/package.json" }}
      # Fallback in case checksum fails
      - yarn-0605-{{ arch }}-{{ .Branch }}-
      # Fallback in case this is a first-time run on a fork
      - yarn-0605-{{ arch }}-master-

  - &save-yarn-cache
    paths:
      - $NODE_MODULES
      - $YARN_CACHE
    key: yarn-0605-{{ arch }}-{{ .Branch }}-{{ checksum "$DIR/package.json" }}

  - &restore-react-native-cli
    keys:
      - react-native-cli-0605-{{ arch }}

  - &save-react-native-cli
    paths:
      - $NODE_MODULES
    key: react-native-cli-0605-{{ arch }}

  - &restore-fastlane
    keys:
      - fastlane-0605-{{ arch }}

  - &save-fastlane
    paths:
      - ~/CICD/fastlane
    key: fastlane-0605-{{ arch }}

  - &restore-gem-android
    keys:
      - gem-0605-{{ arch }}-{{ .Branch }}-{{ checksum "$ROOT_ANDROID/Gemfile.lock" }}
      # Fallback in case checksum fails
      - gem-0605-{{ arch }}-{{ .Branch }}-
      # Fallback in case this is a first-time run on a fork
      - gem-0605-{{ arch }}-master-

  - &save-gem-android
    paths:
      - $ROOT_ANDROID/vendor/bundle
    key: gem-0605-{{ arch }}-{{ .Branch }}-{{ checksum "$ROOT_ANDROID/Gemfile.lock" }}

  - &install-node-version
    name: Install Nodejs version
    command: |
      curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.35.0/install.sh | bash
      echo 'export NVM_DIR="/Users/distiller/.nvm"' >> $BASH_ENV
      echo ' [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"' >> $BASH_ENV # This loads nvm
      source /Users/distiller/.bashrc
      nvm install v14.2.0
      nvm use v14.2.0

  - &install-react-native-cli
    name: Install react-native-cli
    command: |
      cd $DIR && yarn add react-native-cli

  - &install-fastlane-android
    name: Install fastlane for android
    command: |
      cd $ROOT_ANDROID
      bundle update
      gem install json
      bundle install --path vendor/bundle

  - &yarn
    name: Install Node Dependencies
    command: |
      rm -rf node_modules
      rm -rf ~/.rncache
      cd $DIR && yarn cache clean && yarn install

  - &test
    name: Run unit test
    command: |
      cd $DIR && yarn test --coverage --maxWorkers=2

version: 2

jobs:
  build:
    working_directory: $ROOT_DIR
    docker:
      - image: circleci/node:14.2.0

    steps:
      - checkout

      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache

      - persist_to_workspace:
          root: $ROOT_DIR
          paths:
            - .

  test:
    working_directory: $ROOT_DIR/
    docker:
      - image: circleci/node:14.2.0
    steps:
      - checkout

      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache

      - run: *test

  android:
    working_directory: $ROOT_DIR/
    environment:
      TERM: dumb
      JAVA_OPTS: "-Xms512m -Xmx2g"
      GRADLE_OPTS: '-Xmx3g -Dorg.gradle.daemon=false -Dorg.gradle.jvmargs="-Xmx2g -XX:+HeapDumpOnOutOfMemoryError"'

    docker:
      - image: circleci/android:api-29-node

    steps:
      - checkout

      - restore-cache: *restore-yarn-cache
      - run: *yarn
      - save-cache: *save-yarn-cache

      - restore-cache: *restore-gem-android
      - save-cache: *save-gem-android

      - run: *install-fastlane-android

      - run:
          name: version patch
          command: |
            cd $DIR
            npm version patch

      - run: *test

      - run:
          name: Approve license for build tools
          command: (echo y; echo y; echo y; echo y; echo y; echo y) | $ANDROID_HOME/tools/bin/sdkmanager --licenses

      - run:
          name: Build apk

          command: |
            cd $ROOT_ANDROID
            bundle exec fastlane deploy

workflows:
  version: 2
  deploy:
    jobs:
      - build:
          filters:
            branches:
              only:
                - master

      - android:
          requires:
            - build
          filters:
            branches:
              only:
                - master